const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  BOT_TOKEN: process.env.BOT_TOKEN || '8403584306:AAH4Ur6s46KYaUrjGOk3DRjT4d6AjbqKzj8',
  USERS: {
    adminApet: { password: '1234', park: 'parkFrunze', role: 'admin' },
    adminNarek: { password: '4321', park: 'parkMorVokzal', role: 'admin' },
    adminXunk: { password: '9999', park: 'parkNeptun', role: 'admin' },
    manager1: { password: '5678', park: 'parkFrunze', role: 'manager' },
    manager2: { password: '8765', park: 'parkFrunze', role: 'manager' },
    supervisor1: { password: '1111', park: 'parkFrunze', role: 'supervisor' },
    supervisor2: { password: '2222', park: 'parkFrunze', role: 'supervisor' },
    managerMorVokzal: { password: '3333', park: 'parkMorVokzal', role: 'manager' },
    managerNeptun: { password: '4444', park: 'parkNeptun', role: 'manager' },
    testUser1: { password: 'test1', park: 'parkFrunze', role: 'viewer' },
    testUser2: { password: 'test2', park: 'parkFrunze', role: 'viewer' }
  },
  PARKS: {
    parkFrunze: { name: '–ü–∞—Ä–∫ –§—Ä—É–Ω–∑–µ', hockeyMachines: 5, boxerMachines: 1 },
    parkMorVokzal: { name: '–ü–∞—Ä–∫ –ú–æ—Ä—Å–∫–æ–π –í–æ–∫–∑–∞–ª', hockeyMachines: 1, boxerMachines: 1 },
    parkNeptun: { name: '–ü–∞—Ä–∫ –ù–µ–ø—Ç—É–Ω', hockeyMachines: 1, boxerMachines: 1 }
  },
  SECURITY: {
    maxLoginAttempts: parseInt(process.env.MAX_LOGIN_ATTEMPTS) || 3,
    sessionTimeout: parseInt(process.env.SESSION_TIMEOUT) || 30 * 60,
    allowedUsers: parseInt(process.env.ALLOWED_USERS) || 10
  },
  DATA_SETTINGS: {
    dataFile: process.env.DATA_FILE || './bot-data.json',
    backupInterval: parseInt(process.env.BACKUP_INTERVAL) || 24 * 60 * 60 * 1000
  },
  BOT_SETTINGS: {
    polling: true,
    parse_mode: 'HTML',
    disable_web_page_preview: true
  }
};

const bot = new TelegramBot(config.BOT_TOKEN, config.BOT_SETTINGS);

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
let parksData = {};
const userStates = {};
const loginAttempts = {};
const activeSessions = {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
  try {
    if (fs.existsSync(config.DATA_SETTINGS.dataFile)) {
      const raw = fs.readFileSync(config.DATA_SETTINGS.dataFile);
      parksData = JSON.parse(raw);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } else {
      parksData = {
        parkFrunze: { employees: [], shifts: {}, machines: [] },
        parkMorVokzal: { employees: [], shifts: {}, machines: [] },
        parkNeptun: { employees: [], shifts: {}, machines: [] }
      };
      saveData();
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    parksData = {
      parkFrunze: { employees: [], shifts: {}, machines: [] },
      parkMorVokzal: { employees: [], shifts: {}, machines: [] },
      parkNeptun: { employees: [], shifts: {}, machines: [] }
    };
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
  try {
    fs.writeFileSync(config.DATA_SETTINGS.dataFile, JSON.stringify(parksData, null, 2));
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
function createBackup() {
  try {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupFile = `backup-${timestamp}.json`;
    fs.writeFileSync(backupFile, JSON.stringify(parksData, null, 2));
    console.log(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupFile}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
  }
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
function logStatus() {
  const activeUsers = Object.keys(activeSessions).length;
  const totalEmployees = Object.values(parksData).reduce((sum, park) => sum + park.employees.length, 0);
  const totalMachines = Object.values(parksData).reduce((sum, park) => sum + park.machines.length, 0);
  
  console.log(`üü¢ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:`);
  console.log(`   üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}/${config.SECURITY.allowedUsers}`);
  console.log(`   üè¢ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${totalEmployees}`);
  console.log(`   üéÆ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –∞–≤—Ç–æ–º–∞—Ç–æ–≤: ${totalMachines}`);
  console.log(`   ‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}`);
}

loadData();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
setInterval(createBackup, config.DATA_SETTINGS.backupInterval);
setInterval(logStatus, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function checkSecurity(chatId) {
  const now = Date.now();
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
  Object.keys(activeSessions).forEach(sessionId => {
    if (now - activeSessions[sessionId].timestamp > config.SECURITY.sessionTimeout * 1000) {
      delete activeSessions[sessionId];
      delete userStates[sessionId];
      console.log(`‚è∞ –°–µ—Å—Å–∏—è ${sessionId} –∏—Å—Ç–µ–∫–ª–∞`);
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const activeUsers = Object.keys(activeSessions).length;
  if (activeUsers >= config.SECURITY.allowedUsers) {
    return { allowed: false, reason: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' };
  }
  
  return { allowed: true };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function checkPermission(userRole, action) {
  const permissions = {
    admin: ['read', 'write', 'delete', 'manage_users'],
    manager: ['read', 'write'],
    supervisor: ['read', 'write'],
    viewer: ['read']
  };
  
  return permissions[userRole]?.includes(action) || false;
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainKeyboard = {
  reply_markup: {
    keyboard: [
      ['üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', 'üìÖ –°–º–µ–Ω—ã'],
      ['üéÆ –•–æ–∫–∫–µ–π/–ë–æ–∫—Å—ë—Ä', 'üìä –û—Ç—á—ë—Ç—ã'],
      ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ'],
      ['üö™ –í—ã–π—Ç–∏']
    ],
    resize_keyboard: true
  }
};

const backKeyboard = {
  reply_markup: {
    keyboard: [['üîô –ù–∞–∑–∞–¥']],
    resize_keyboard: true
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const securityCheck = checkSecurity(chatId);
  
  if (!securityCheck.allowed) {
    bot.sendMessage(chatId, `‚ùå ${securityCheck.reason}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
    return;
  }
  
  userStates[chatId] = { state: 'login', step: 'username' };
  loginAttempts[chatId] = 0;
  
  bot.sendMessage(chatId, 
    'üé¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∫–æ–º –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤!\n\n' +
    '–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:',
    backKeyboard
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const securityCheck = checkSecurity(chatId);
  if (!securityCheck.allowed) {
    bot.sendMessage(chatId, `‚ùå ${securityCheck.reason}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
    return;
  }
  
  if (!userStates[chatId]) {
    userStates[chatId] = { state: 'login', step: 'username' };
    loginAttempts[chatId] = 0;
  }
  
  const state = userStates[chatId];
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
  if (text === 'üö™ –í—ã–π—Ç–∏') {
    delete userStates[chatId];
    delete activeSessions[chatId];
    delete loginAttempts[chatId];
    bot.sendMessage(chatId, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.');
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
  if (text === 'üîô –ù–∞–∑–∞–¥') {
    if (state.state === 'logged_in') {
      showMainMenu(chatId);
    } else {
      userStates[chatId] = { state: 'login', step: 'username' };
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:', backKeyboard);
    }
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (state.state === 'login') {
    handleLogin(chatId, text, state);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  if (state.state === 'logged_in') {
    handleMainMenu(chatId, text, state);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  handleStates(chatId, text, state);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function handleLogin(chatId, text, state) {
  if (state.step === 'username') {
    if (config.USERS[text]) {
      state.username = text;
      state.step = 'password';
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
    } else {
      loginAttempts[chatId] = (loginAttempts[chatId] || 0) + 1;
      if (loginAttempts[chatId] >= config.SECURITY.maxLoginAttempts) {
        bot.sendMessage(chatId, '‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        delete userStates[chatId];
        return;
      }
      bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ${config.SECURITY.maxLoginAttempts - loginAttempts[chatId]}`);
    }
  } else if (state.step === 'password') {
    if (config.USERS[state.username] && config.USERS[state.username].password === text) {
      state.state = 'logged_in';
      state.park = config.USERS[state.username].park;
      state.role = config.USERS[state.username].role;
      delete state.step;
      delete state.username;
      delete loginAttempts[chatId];
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      activeSessions[chatId] = {
        user: state.username,
        park: state.park,
        role: state.role,
        timestamp: Date.now()
      };
      
      const parkName = config.PARKS[state.park]?.name || state.park;
      bot.sendMessage(chatId, 
        `‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!\nüè¢ –ü–∞—Ä–∫: ${parkName}\nüë§ –†–æ–ª—å: ${state.role}`,
        mainKeyboard
      );
      showMainMenu(chatId);
    } else {
      loginAttempts[chatId] = (loginAttempts[chatId] || 0) + 1;
      if (loginAttempts[chatId] >= config.SECURITY.maxLoginAttempts) {
        bot.sendMessage(chatId, '‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        delete userStates[chatId];
        return;
      }
      bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ${config.SECURITY.maxLoginAttempts - loginAttempts[chatId]}`);
    }
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId) {
  const state = userStates[chatId];
  const park = state.park;
  const parkName = config.PARKS[park]?.name || park;
  
  bot.sendMessage(chatId, 
    `üè¢ –ü–∞—Ä–∫: ${parkName}\nüë§ –†–æ–ª—å: ${state.role}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    mainKeyboard
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function handleMainMenu(chatId, text, state) {
  switch (text) {
    case 'üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏':
      if (checkPermission(state.role, 'read')) {
        showEmployeesMenu(chatId, state);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.');
      }
      break;
    case 'üìÖ –°–º–µ–Ω—ã':
      if (checkPermission(state.role, 'read')) {
        showShiftsMenu(chatId, state);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω.');
      }
      break;
    case 'üéÆ –•–æ–∫–∫–µ–π/–ë–æ–∫—Å—ë—Ä':
      if (checkPermission(state.role, 'read')) {
        showMachinesMenu(chatId, state);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–æ–≤.');
      }
      break;
    case 'üìä –û—Ç—á—ë—Ç—ã':
      if (checkPermission(state.role, 'read')) {
        showReports(chatId, state);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤.');
      }
      break;
    case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
      showSettings(chatId, state);
      break;
    case '‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ':
      showAbout(chatId);
      break;
  }
}

// –ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function showEmployeesMenu(chatId, state) {
  const park = state.park;
  const employees = parksData[park]?.employees || [];
  const parkName = config.PARKS[park]?.name || park;
  
  let message = `üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–∞—Ä–∫–∞ ${parkName}:\n\n`;
  if (employees.length === 0) {
    message += '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç';
  } else {
    employees.forEach((emp, index) => {
      message += `${index + 1}. ${emp}\n`;
    });
  }
  
  const keyboard = {
    reply_markup: {
      keyboard: [
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'],
        ['üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'],
        ['üîô –ù–∞–∑–∞–¥']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, keyboard);
  state.currentSection = 'employees';
}

// –ú–µ–Ω—é —Å–º–µ–Ω
function showShiftsMenu(chatId, state) {
  const park = state.park;
  const employees = parksData[park]?.employees || [];
  const shifts = parksData[park]?.shifts || {};
  const parkName = config.PARKS[park]?.name || park;
  
  let message = `üìÖ –¢–∞–±–ª–∏—Ü–∞ —Å–º–µ–Ω –ø–∞—Ä–∫–∞ ${parkName}:\n\n`;
  
  if (employees.length === 0) {
    message += '–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–º–µ–Ω';
  } else {
    const days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    message += '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ | ' + days.join(' | ') + ' | –ó–∞—Ä–ø–ª–∞—Ç–∞\n';
    message += '‚îÄ'.repeat(50) + '\n';
    
    employees.forEach(name => {
      const row = shifts[name] || Array(7).fill('');
      const salary = calculateSalary(name, row);
      message += `${name} | ${row.join(' | ')} | ${salary}‚ÇΩ\n`;
    });
  }
  
  const keyboard = {
    reply_markup: {
      keyboard: [
        ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—ã'],
        ['üí∞ –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã'],
        ['üîô –ù–∞–∑–∞–¥']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, keyboard);
  state.currentSection = 'shifts';
}

// –ú–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–æ–≤
function showMachinesMenu(chatId, state) {
  const park = state.park;
  const machines = parksData[park]?.machines || [];
  const parkName = config.PARKS[park]?.name || park;
  
  let message = `üéÆ –•–æ–∫–∫–µ–π/–ë–æ–∫—Å—ë—Ä –ø–∞—Ä–∫–∞ ${parkName}:\n\n`;
  
  if (machines.length === 0) {
    message += '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞';
  } else {
    message += '–¢–∏–ø | –° | –ü–æ | –°—É–º–º–∞\n';
    message += '‚îÄ'.repeat(30) + '\n';
    
    machines.forEach(entry => {
      const type = entry.type === 'hockey' ? '–•–æ–∫–∫–µ–π' : '–ë–æ–∫—Å—ë—Ä';
      message += `${type} | ${entry.from} | ${entry.to} | ${entry.amount}‚ÇΩ\n`;
    });
  }
  
  const keyboard = {
    reply_markup: {
      keyboard: [
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å'],
        ['üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å'],
        ['üîô –ù–∞–∑–∞–¥']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, keyboard);
  state.currentSection = 'machines';
}

// –û—Ç—á—ë—Ç—ã
function showReports(chatId, state) {
  const park = state.park;
  const employees = parksData[park]?.employees || [];
  const shifts = parksData[park]?.shifts || {};
  const machines = parksData[park]?.machines || [];
  const parkName = config.PARKS[park]?.name || park;
  
  // –†–∞—Å—á—ë—Ç –æ–±—â–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
  let totalSalary = 0;
  employees.forEach(name => {
    const row = shifts[name] || Array(7).fill('');
    totalSalary += calculateSalary(name, row);
  });
  
  // –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–≤
  const hockeyIncome = machines
    .filter(m => m.type === 'hockey')
    .reduce((sum, m) => sum + m.amount, 0);
  
  const boxerIncome = machines
    .filter(m => m.type === 'boxer')
    .reduce((sum, m) => sum + m.amount, 0);
  
  const message = `üìä –û—Ç—á—ë—Ç –ø–æ –ø–∞—Ä–∫—É ${parkName}:\n\n` +
    `üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}\n` +
    `üí∞ –û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${totalSalary}‚ÇΩ\n` +
    `üèí –î–æ—Ö–æ–¥ —Å —Ö–æ–∫–∫–µ—è: ${hockeyIncome}‚ÇΩ\n` +
    `ü•ä –î–æ—Ö–æ–¥ —Å –±–æ–∫—Å—ë—Ä–∞: ${boxerIncome}‚ÇΩ\n` +
    `üìà –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${hockeyIncome + boxerIncome}‚ÇΩ\n` +
    `üíµ –ü—Ä–∏–±—ã–ª—å: ${hockeyIncome + boxerIncome - totalSalary}‚ÇΩ`;
  
  const keyboard = {
    reply_markup: {
      keyboard: [['üîô –ù–∞–∑–∞–¥']],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, keyboard);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
function showSettings(chatId, state) {
  const park = state.park;
  const parkName = config.PARKS[park]?.name || park;
  
  const message = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
    `üè¢ –ü–∞—Ä–∫: ${parkName}\n` +
    `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${Object.keys(config.USERS).find(u => config.USERS[u].park === park)}\n` +
    `üîê –†–æ–ª—å: ${state.role}\n` +
    `‚è∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${Object.keys(activeSessions).length}/${config.SECURITY.allowedUsers}\n` +
    `üîÑ –ê–≤—Ç–æ—Ä–µ–∑–µ—Ä–≤: ${config.DATA_SETTINGS.backupInterval / (60 * 60 * 1000)}—á\n` +
    `üîí –ü–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞: ${config.SECURITY.maxLoginAttempts}\n` +
    `‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏: ${config.SECURITY.sessionTimeout / 60}–º–∏–Ω`;
  
  const keyboard = {
    reply_markup: {
      keyboard: [['üîô –ù–∞–∑–∞–¥']],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, keyboard);
}

// –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
function showAbout(chatId) {
  const message = `‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ\n\n` +
    `üé¢ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∫–æ–º –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤\n` +
    `–í–µ—Ä—Å–∏—è: 3.0.0 (–ü—Ä–æ–¥–∞–∫—à–Ω)\n\n` +
    `üìã –§—É–Ω–∫—Ü–∏–∏:\n` +
    `‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏\n` +
    `‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω\n` +
    `‚Ä¢ –£—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–≤\n` +
    `‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤\n` +
    `‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n` +
    `‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n` +
    `‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã\n\n` +
    `üîê –†–æ–ª–∏:\n` +
    `‚Ä¢ admin - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n` +
    `‚Ä¢ manager - —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å\n` +
    `‚Ä¢ supervisor - —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å\n` +
    `‚Ä¢ viewer - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ\n\n` +
    `üè¢ –ü–∞—Ä–∫–∏: ${Object.keys(config.PARKS).map(park => config.PARKS[park].name).join(', ')}\n\n` +
    `üîÑ –ê–≤—Ç–æ—Ä–µ–∑–µ—Ä–≤: ${config.DATA_SETTINGS.backupInterval / (60 * 60 * 1000)}—á\n` +
    `üë• –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${config.SECURITY.allowedUsers}`;
  
  const keyboard = {
    reply_markup: {
      keyboard: [['üîô –ù–∞–∑–∞–¥']],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, keyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
function handleStates(chatId, text, state) {
  if (!state.currentSection) return;
  
  switch (state.currentSection) {
    case 'employees':
      handleEmployeesStates(chatId, text, state);
      break;
    case 'shifts':
      handleShiftsStates(chatId, text, state);
      break;
    case 'machines':
      handleMachinesStates(chatId, text, state);
      break;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function handleEmployeesStates(chatId, text, state) {
  if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞') {
    if (!checkPermission(state.role, 'write')) {
      bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.');
      return;
    }
    state.subState = 'adding_employee';
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:');
  } else if (text === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞') {
    if (!checkPermission(state.role, 'delete')) {
      bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.');
      return;
    }
    const employees = parksData[state.park]?.employees || [];
    if (employees.length === 0) {
      bot.sendMessage(chatId, '–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }
    
    let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n';
    employees.forEach((emp, index) => {
      message += `${index + 1}. ${emp}\n`;
    });
    
    state.subState = 'deleting_employee';
    bot.sendMessage(chatId, message);
  } else if (state.subState === 'adding_employee') {
    const park = state.park;
    if (!parksData[park].employees.includes(text)) {
      parksData[park].employees.push(text);
      parksData[park].shifts[text] = Array(7).fill('');
      saveData();
      bot.sendMessage(chatId, `‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${text}" –¥–æ–±–∞–≤–ª–µ–Ω!`);
    } else {
      bot.sendMessage(chatId, '‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    }
    delete state.subState;
    showEmployeesMenu(chatId, state);
  } else if (state.subState === 'deleting_employee') {
    const park = state.park;
    const employees = parksData[park]?.employees || [];
    const index = parseInt(text) - 1;
    
    if (index >= 0 && index < employees.length) {
      const employeeName = employees[index];
      parksData[park].employees.splice(index, 1);
      delete parksData[park].shifts[employeeName];
      saveData();
      bot.sendMessage(chatId, `‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${employeeName}" —É–¥–∞–ª—ë–Ω!`);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!');
    }
    delete state.subState;
    showEmployeesMenu(chatId, state);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–º–µ–Ω
function handleShiftsStates(chatId, text, state) {
  if (text === '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—ã') {
    if (!checkPermission(state.role, 'write')) {
      bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω.');
      return;
    }
    const employees = parksData[state.park]?.employees || [];
    if (employees.length === 0) {
      bot.sendMessage(chatId, '–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω');
      return;
    }
    
    let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω:\n\n';
    employees.forEach((emp, index) => {
      message += `${index + 1}. ${emp}\n`;
    });
    
    state.subState = 'selecting_employee_for_shifts';
    bot.sendMessage(chatId, message);
  } else if (text === 'üí∞ –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã') {
    const park = state.park;
    const employees = parksData[park]?.employees || [];
    const shifts = parksData[park]?.shifts || {};
    
    let message = 'üí∞ –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã:\n\n';
    let totalSalary = 0;
    
    employees.forEach(name => {
      const row = shifts[name] || Array(7).fill('');
      const salary = calculateSalary(name, row);
      totalSalary += salary;
      message += `${name}: ${salary}‚ÇΩ\n`;
    });
    
    message += `\nüíµ –û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${totalSalary}‚ÇΩ`;
    bot.sendMessage(chatId, message);
  } else if (state.subState === 'selecting_employee_for_shifts') {
    const park = state.park;
    const employees = parksData[park]?.employees || [];
    const index = parseInt(text) - 1;
    
    if (index >= 0 && index < employees.length) {
      const employeeName = employees[index];
      state.selectedEmployee = employeeName;
      state.subState = 'editing_shifts';
      
      const shifts = parksData[park]?.shifts?.[employeeName] || Array(7).fill('');
      const days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
      
      let message = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω –¥–ª—è ${employeeName}:\n\n`;
      days.forEach((day, i) => {
        message += `${day}: ${shifts[i] || ''}\n`;
      });
      message += '\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (7 –∑–Ω–∞—á–µ–Ω–∏–π):';
      
      bot.sendMessage(chatId, message);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!');
      delete state.subState;
      showShiftsMenu(chatId, state);
    }
  } else if (state.subState === 'editing_shifts') {
    const park = state.park;
    const values = text.split(',').map(v => v.trim());
    
    if (values.length === 7) {
      const employeeName = state.selectedEmployee;
      parksData[park].shifts[employeeName] = values;
      saveData();
      
      bot.sendMessage(chatId, `‚úÖ –°–º–µ–Ω—ã –¥–ª—è ${employeeName} –æ–±–Ω–æ–≤–ª–µ–Ω—ã!`);
      delete state.subState;
      delete state.selectedEmployee;
      showShiftsMenu(chatId, state);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ 7 –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.');
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–æ–≤
function handleMachinesStates(chatId, text, state) {
  if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å') {
    if (!checkPermission(state.role, 'write')) {
      bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π.');
      return;
    }
    state.subState = 'adding_machine_record';
    bot.sendMessage(chatId, 
      '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
      '—Ç–∏–ø,–¥–∞—Ç–∞_—Å,–¥–∞—Ç–∞_–ø–æ,—Å—É–º–º–∞\n\n' +
      '–ü—Ä–∏–º–µ—Ä: hockey,2024-01-01,2024-01-07,5000\n' +
      '–¢–∏–ø—ã: hockey, boxer'
    );
  } else if (text === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å') {
    if (!checkPermission(state.role, 'delete')) {
      bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π.');
      return;
    }
    const machines = parksData[state.park]?.machines || [];
    if (machines.length === 0) {
      bot.sendMessage(chatId, '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }
    
    let message = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n';
    machines.forEach((entry, index) => {
      const type = entry.type === 'hockey' ? '–•–æ–∫–∫–µ–π' : '–ë–æ–∫—Å—ë—Ä';
      message += `${index + 1}. ${type} | ${entry.from}-${entry.to} | ${entry.amount}‚ÇΩ\n`;
    });
    
    state.subState = 'deleting_machine_record';
    bot.sendMessage(chatId, message);
  } else if (state.subState === 'adding_machine_record') {
    const parts = text.split(',');
    if (parts.length === 4) {
      const [type, from, to, amount] = parts;
      
      if (type !== 'hockey' && type !== 'boxer') {
        bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ hockey –∏–ª–∏ boxer');
        return;
      }
      
      const park = state.park;
      parksData[park].machines.push({
        type,
        from,
        to,
        amount: parseInt(amount)
      });
      saveData();
      
      const typeName = type === 'hockey' ? '–•–æ–∫–∫–µ–π' : '–ë–æ–∫—Å—ë—Ä';
      bot.sendMessage(chatId, `‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${typeName} | ${from}-${to} | ${amount}‚ÇΩ`);
      delete state.subState;
      showMachinesMenu(chatId, state);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ç–∏–ø,–¥–∞—Ç–∞_—Å,–¥–∞—Ç–∞_–ø–æ,—Å—É–º–º–∞');
    }
  } else if (state.subState === 'deleting_machine_record') {
    const park = state.park;
    const machines = parksData[park]?.machines || [];
    const index = parseInt(text) - 1;
    
    if (index >= 0 && index < machines.length) {
      const entry = machines[index];
      const typeName = entry.type === 'hockey' ? '–•–æ–∫–∫–µ–π' : '–ë–æ–∫—Å—ë—Ä';
      
      parksData[park].machines.splice(index, 1);
      saveData();
      
      bot.sendMessage(chatId, `‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: ${typeName} | ${entry.from}-${entry.to} | ${entry.amount}‚ÇΩ`);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏!');
    }
    delete state.subState;
    showMachinesMenu(chatId, state);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
function calculateSalary(name, row) {
  const total = row.reduce((sum, val) => {
    if (val === '++') return sum + 2000;
    if (val === '—Å—Ç') return sum + 1000;
    if (val === '–∫–∞—Å—Å–∞1') return sum + 2500;
    if (val === '–∫–∞—Å—Å–∞2') return sum + 3000;
    if (val === '+') return sum + 1500;
    if (val === '1200') return sum + 1200;
    if (val === '1000') return sum + 1000;
    return sum;
  }, 0);
  return total;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.log('‚ùå Polling error:', error);
});

bot.on('error', (error) => {
  console.log('‚ùå Bot error:', error);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  saveData();
  createBackup();
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  saveData();
  createBackup();
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É');
  process.exit(0);
});

console.log('üöÄ –ü—Ä–æ–¥–∞–∫—à–Ω Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log('üîê –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∞');
console.log('üë• –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', config.SECURITY.allowedUsers);
console.log('‚è∞ –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏:', config.SECURITY.sessionTimeout / 60, '–º–∏–Ω—É—Ç');
console.log('üíæ –ê–≤—Ç–æ—Ä–µ–∑–µ—Ä–≤ –∫–∞–∂–¥—ã–µ:', config.DATA_SETTINGS.backupInterval / (60 * 60 * 1000), '—á–∞—Å–æ–≤');
console.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç'); 