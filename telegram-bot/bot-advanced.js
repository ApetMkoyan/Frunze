const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
let config;
try {
  config = require('./config.js');
} catch (error) {
  console.log('‚ö†Ô∏è –§–∞–π–ª config.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
  config = {
    BOT_TOKEN: 'YOUR_BOT_TOKEN_HERE',
    USERS: {
      adminApet: { password: '1234', park: 'parkFrunze' },
      adminNarek: { password: '4321', park: 'parkMorVokzal' },
      adminXunk: { password: '9999', park: 'parkNeptun' },
    },
    SALARY_RATES: {
      '++': 2000, '—Å—Ç': 1000, '–∫–∞—Å—Å–∞1': 2500, '–∫–∞—Å—Å–∞2': 3000,
      '+': 1500, '1200': 1200, '1000': 1000,
    },
    PARKS: {
      parkFrunze: { name: '–ü–∞—Ä–∫ –§—Ä—É–Ω–∑–µ', hockeyMachines: 5, boxerMachines: 1 },
      parkMorVokzal: { name: '–ü–∞—Ä–∫ –ú–æ—Ä—Å–∫–æ–π –í–æ–∫–∑–∞–ª', hockeyMachines: 1, boxerMachines: 1 },
      parkNeptun: { name: '–ü–∞—Ä–∫ –ù–µ–ø—Ç—É–Ω', hockeyMachines: 1, boxerMachines: 1 },
    },
    BOT_SETTINGS: { polling: true, parse_mode: 'HTML', disable_web_page_preview: true },
    DATA_SETTINGS: { dataFile: './bot-data.json', backupInterval: 24 * 60 * 60 * 1000 },
  };
}

const bot = new TelegramBot(config.BOT_TOKEN, config.BOT_SETTINGS);

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
let parksData = {};
const userStates = {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
  if (fs.existsSync(config.DATA_SETTINGS.dataFile)) {
    try {
      const raw = fs.readFileSync(config.DATA_SETTINGS.dataFile);
      parksData = JSON.parse(raw);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      parksData = initializeParksData();
    }
  } else {
    parksData = initializeParksData();
    saveData();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∫–æ–≤
function initializeParksData() {
  const data = {};
  Object.keys(config.PARKS).forEach(parkKey => {
    data[parkKey] = { employees: [], shifts: {}, machines: [] };
  });
  return data;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π
function saveData() {
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if (fs.existsSync(config.DATA_SETTINGS.dataFile)) {
      const backupFile = config.DATA_SETTINGS.dataFile.replace('.json', `_backup_${Date.now()}.json`);
      fs.copyFileSync(config.DATA_SETTINGS.dataFile, backupFile);
    }
    
    fs.writeFileSync(config.DATA_SETTINGS.dataFile, JSON.stringify(parksData, null, 2));
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

loadData();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
setInterval(() => {
  saveData();
}, config.DATA_SETTINGS.backupInterval);

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainKeyboard = {
  reply_markup: {
    keyboard: [
      ['üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', 'üìÖ –°–º–µ–Ω—ã'],
      ['üéÆ –•–æ–∫–∫–µ–π/–ë–æ–∫—Å—ë—Ä', 'üìä –û—Ç—á—ë—Ç—ã'],
      ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ'],
      ['üö™ –í—ã–π—Ç–∏']
    ],
    resize_keyboard: true
  }
};

const backKeyboard = {
  reply_markup: {
    keyboard: [['üîô –ù–∞–∑–∞–¥']],
    resize_keyboard: true
  }
};

// –£—Ç–∏–ª–∏—Ç—ã
function formatCurrency(amount) {
  return new Intl.NumberFormat('ru-RU').format(amount) + '‚ÇΩ';
}

function validateDate(dateString) {
  const date = new Date(dateString);
  return date instanceof Date && !isNaN(date);
}

function getParkName(parkKey) {
  return config.PARKS[parkKey]?.name || parkKey;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = { state: 'login', step: 'username' };
  
  bot.sendMessage(chatId, 
    'üé¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∫–æ–º –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤!\n\n' +
    '–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:',
    backKeyboard
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const helpText = `
ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

<b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ üîô –ù–∞–∑–∞–¥ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
‚Ä¢ üö™ –í—ã–π—Ç–∏ - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é

<b>–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –°–º–µ–Ω—ã: 7 –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç—ã: —Ç–∏–ø,–¥–∞—Ç–∞_—Å,–¥–∞—Ç–∞_–ø–æ,—Å—É–º–º–∞
‚Ä¢ –î–∞—Ç—ã: YYYY-MM-DD

<b>–¢–∏–ø—ã —Å–º–µ–Ω:</b>
++ (2000‚ÇΩ), —Å—Ç (1000‚ÇΩ), –∫–∞—Å—Å–∞1 (2500‚ÇΩ), –∫–∞—Å—Å–∞2 (3000‚ÇΩ), + (1500‚ÇΩ), 1200 (1200‚ÇΩ), 1000 (1000‚ÇΩ)
  `;
  
  bot.sendMessage(chatId, helpText, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
bot.onText(/\/status/, (msg) => {
  const chatId = msg.chat.id;
  const state = userStates[chatId];
  
  if (state && state.state === 'logged_in') {
    const park = state.park;
    const employees = parksData[park]?.employees || [];
    const machines = parksData[park]?.machines || [];
    
    const statusText = `
üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>

üè¢ –ü–∞—Ä–∫: ${getParkName(park)}
üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}
üéÆ –ó–∞–ø–∏—Å–µ–π –∞–≤—Ç–æ–º–∞—Ç–æ–≤: ${machines.length}
üíæ –î–∞–Ω–Ω—ã–µ: ${fs.existsSync(config.DATA_SETTINGS.dataFile) ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã' : '‚ùå –û—à–∏–±–∫–∞'}
ü§ñ –ë–æ—Ç: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
    `;
    
    bot.sendMessage(chatId, statusText, { parse_mode: 'HTML' });
  } else {
    bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  if (!userStates[chatId]) {
    userStates[chatId] = { state: 'login', step: 'username' };
  }
  
  const state = userStates[chatId];
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
  if (text === 'üö™ –í—ã–π—Ç–∏') {
    delete userStates[chatId];
    bot.sendMessage(chatId, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.');
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
  if (text === 'üîô –ù–∞–∑–∞–¥') {
    if (state.state === 'logged_in') {
      showMainMenu(chatId);
    } else {
      userStates[chatId] = { state: 'login', step: 'username' };
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:', backKeyboard);
    }
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (state.state === 'login') {
    handleLogin(chatId, text, state);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  if (state.state === 'logged_in') {
    handleMainMenu(chatId, text, state);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  handleStates(chatId, text, state);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function handleLogin(chatId, text, state) {
  if (state.step === 'username') {
    if (config.USERS[text]) {
      state.username = text;
      state.step = 'password';
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
    }
  } else if (state.step === 'password') {
    if (config.USERS[state.username] && config.USERS[state.username].password === text) {
      state.state = 'logged_in';
      state.park = config.USERS[state.username].park;
      delete state.step;
      delete state.username;
      
      bot.sendMessage(chatId, 
        `‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!\nüè¢ –ü–∞—Ä–∫: ${getParkName(state.park)}`,
        mainKeyboard
      );
      showMainMenu(chatId);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
    }
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId) {
  const state = userStates[chatId];
  const park = state.park;
  
  bot.sendMessage(chatId, 
    `üè¢ –ü–∞—Ä–∫: ${getParkName(park)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    mainKeyboard
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function handleMainMenu(chatId, text, state) {
  switch (text) {
    case 'üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏':
      showEmployeesMenu(chatId, state);
      break;
    case 'üìÖ –°–º–µ–Ω—ã':
      showShiftsMenu(chatId, state);
      break;
    case 'üéÆ –•–æ–∫–∫–µ–π/–ë–æ–∫—Å—ë—Ä':
      showMachinesMenu(chatId, state);
      break;
    case 'üìä –û—Ç—á—ë—Ç—ã':
      showReports(chatId, state);
      break;
    case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
      showSettings(chatId, state);
      break;
    case '‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ':
      showAbout(chatId);
      break;
  }
}

// –ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function showEmployeesMenu(chatId, state) {
  const park = state.park;
  const employees = parksData[park]?.employees || [];
  
  let message = `üë• <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–∞—Ä–∫–∞ ${getParkName(park)}:</b>\n\n`;
  if (employees.length === 0) {
    message += '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç';
  } else {
    employees.forEach((emp, index) => {
      message += `${index + 1}. ${emp}\n`;
    });
  }
  
  const keyboard = {
    reply_markup: {
      keyboard: [
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'],
        ['üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'],
        ['üîô –ù–∞–∑–∞–¥']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, { parse_mode: 'HTML' }, keyboard);
  state.currentSection = 'employees';
}

// –ú–µ–Ω—é —Å–º–µ–Ω
function showShiftsMenu(chatId, state) {
  const park = state.park;
  const employees = parksData[park]?.employees || [];
  const shifts = parksData[park]?.shifts || {};
  
  let message = `üìÖ <b>–¢–∞–±–ª–∏—Ü–∞ —Å–º–µ–Ω –ø–∞—Ä–∫–∞ ${getParkName(park)}:</b>\n\n`;
  
  if (employees.length === 0) {
    message += '–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–º–µ–Ω';
  } else {
    const days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    message += '<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ | ' + days.join(' | ') + ' | –ó–∞—Ä–ø–ª–∞—Ç–∞</b>\n';
    message += '‚îÄ'.repeat(60) + '\n';
    
    employees.forEach(name => {
      const row = shifts[name] || Array(7).fill('');
      const salary = calculateSalary(name, row);
      message += `${name} | ${row.join(' | ')} | ${formatCurrency(salary)}\n`;
    });
  }
  
  const keyboard = {
    reply_markup: {
      keyboard: [
        ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—ã'],
        ['üí∞ –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã'],
        ['üîô –ù–∞–∑–∞–¥']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, { parse_mode: 'HTML' }, keyboard);
  state.currentSection = 'shifts';
}

// –ú–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–æ–≤
function showMachinesMenu(chatId, state) {
  const park = state.park;
  const machines = parksData[park]?.machines || [];
  const parkConfig = config.PARKS[park];
  
  let message = `üéÆ <b>–•–æ–∫–∫–µ–π/–ë–æ–∫—Å—ë—Ä –ø–∞—Ä–∫–∞ ${getParkName(park)}:</b>\n\n`;
  message += `üèí –•–æ–∫–∫–µ–π–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤: ${parkConfig.hockeyMachines}\n`;
  message += `ü•ä –ë–æ–∫—Å—ë—Ä—Å–∫–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤: ${parkConfig.boxerMachines}\n\n`;
  
  if (machines.length === 0) {
    message += '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞';
  } else {
    message += '<b>–¢–∏–ø | –° | –ü–æ | –°—É–º–º–∞</b>\n';
    message += '‚îÄ'.repeat(40) + '\n';
    
    machines.forEach(entry => {
      const type = entry.type === 'hockey' ? 'üèí –•–æ–∫–∫–µ–π' : 'ü•ä –ë–æ–∫—Å—ë—Ä';
      message += `${type} | ${entry.from} | ${entry.to} | ${formatCurrency(entry.amount)}\n`;
    });
  }
  
  const keyboard = {
    reply_markup: {
      keyboard: [
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å'],
        ['üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å'],
        ['üîô –ù–∞–∑–∞–¥']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, { parse_mode: 'HTML' }, keyboard);
  state.currentSection = 'machines';
}

// –û—Ç—á—ë—Ç—ã
function showReports(chatId, state) {
  const park = state.park;
  const employees = parksData[park]?.employees || [];
  const shifts = parksData[park]?.shifts || {};
  const machines = parksData[park]?.machines || [];
  
  // –†–∞—Å—á—ë—Ç –æ–±—â–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
  let totalSalary = 0;
  employees.forEach(name => {
    const row = shifts[name] || Array(7).fill('');
    totalSalary += calculateSalary(name, row);
  });
  
  // –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–≤
  const hockeyIncome = machines
    .filter(m => m.type === 'hockey')
    .reduce((sum, m) => sum + m.amount, 0);
  
  const boxerIncome = machines
    .filter(m => m.type === 'boxer')
    .reduce((sum, m) => sum + m.amount, 0);
  
  const totalIncome = hockeyIncome + boxerIncome;
  const profit = totalIncome - totalSalary;
  
  const message = `üìä <b>–û—Ç—á—ë—Ç –ø–æ –ø–∞—Ä–∫—É ${getParkName(park)}:</b>\n\n` +
    `üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}\n` +
    `üí∞ –û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${formatCurrency(totalSalary)}\n` +
    `üèí –î–æ—Ö–æ–¥ —Å —Ö–æ–∫–∫–µ—è: ${formatCurrency(hockeyIncome)}\n` +
    `ü•ä –î–æ—Ö–æ–¥ —Å –±–æ–∫—Å—ë—Ä–∞: ${formatCurrency(boxerIncome)}\n` +
    `üìà –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${formatCurrency(totalIncome)}\n` +
    `üíµ –ü—Ä–∏–±—ã–ª—å: ${formatCurrency(profit)}\n\n` +
    `üìÖ –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: ${new Date().toLocaleString('ru-RU')}`;
  
  const keyboard = {
    reply_markup: {
      keyboard: [['üîô –ù–∞–∑–∞–¥']],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, { parse_mode: 'HTML' }, keyboard);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
function showSettings(chatId, state) {
  const park = state.park;
  const parkConfig = config.PARKS[park];
  
  const message = `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∫–∞ ${getParkName(park)}:</b>\n\n` +
    `üè¢ –ü–∞—Ä–∫: ${getParkName(park)}\n` +
    `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${Object.keys(config.USERS).find(u => config.USERS[u].park === park)}\n` +
    `üèí –•–æ–∫–∫–µ–π–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤: ${parkConfig.hockeyMachines}\n` +
    `ü•ä –ë–æ–∫—Å—ë—Ä—Å–∫–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤: ${parkConfig.boxerMachines}\n\n` +
    `üíæ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: ${config.DATA_SETTINGS.dataFile}\n` +
    `üîÑ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–µ ${config.DATA_SETTINGS.backupInterval / (1000 * 60 * 60)} —á–∞—Å–æ–≤\n\n` +
    `–§—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ.`;
  
  const keyboard = {
    reply_markup: {
      keyboard: [['üîô –ù–∞–∑–∞–¥']],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, { parse_mode: 'HTML' }, keyboard);
}

// –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
function showAbout(chatId) {
  const message = `‚ÑπÔ∏è <b>–û –ø—Ä–æ–≥—Ä–∞–º–º–µ</b>\n\n` +
    `üé¢ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∫–æ–º –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤\n` +
    `–í–µ—Ä—Å–∏—è: 2.0.0\n\n` +
    `üìã <b>–§—É–Ω–∫—Ü–∏–∏:</b>\n` +
    `‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏\n` +
    `‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω\n` +
    `‚Ä¢ –£—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–≤\n` +
    `‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤\n` +
    `‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n` +
    `üè¢ <b>–ü–∞—Ä–∫–∏:</b>\n` +
    `${Object.keys(config.PARKS).map(park => `‚Ä¢ ${getParkName(park)}`).join('\n')}\n\n` +
    `üõ†Ô∏è <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n` +
    `‚Ä¢ Node.js\n` +
    `‚Ä¢ node-telegram-bot-api\n` +
    `‚Ä¢ JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö`;
  
  const keyboard = {
    reply_markup: {
      keyboard: [['üîô –ù–∞–∑–∞–¥']],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, { parse_mode: 'HTML' }, keyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
function handleStates(chatId, text, state) {
  if (!state.currentSection) return;
  
  switch (state.currentSection) {
    case 'employees':
      handleEmployeesStates(chatId, text, state);
      break;
    case 'shifts':
      handleShiftsStates(chatId, text, state);
      break;
    case 'machines':
      handleMachinesStates(chatId, text, state);
      break;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function handleEmployeesStates(chatId, text, state) {
  if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞') {
    state.subState = 'adding_employee';
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:');
  } else if (text === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞') {
    const employees = parksData[state.park]?.employees || [];
    if (employees.length === 0) {
      bot.sendMessage(chatId, '–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }
    
    let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n';
    employees.forEach((emp, index) => {
      message += `${index + 1}. ${emp}\n`;
    });
    
    state.subState = 'deleting_employee';
    bot.sendMessage(chatId, message);
  } else if (state.subState === 'adding_employee') {
    const park = state.park;
    if (!parksData[park].employees.includes(text)) {
      parksData[park].employees.push(text);
      parksData[park].shifts[text] = Array(7).fill('');
      saveData();
      bot.sendMessage(chatId, `‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${text}" –¥–æ–±–∞–≤–ª–µ–Ω!`);
    } else {
      bot.sendMessage(chatId, '‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    }
    delete state.subState;
    showEmployeesMenu(chatId, state);
  } else if (state.subState === 'deleting_employee') {
    const park = state.park;
    const employees = parksData[park]?.employees || [];
    const index = parseInt(text) - 1;
    
    if (index >= 0 && index < employees.length) {
      const employeeName = employees[index];
      parksData[park].employees.splice(index, 1);
      delete parksData[park].shifts[employeeName];
      saveData();
      bot.sendMessage(chatId, `‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${employeeName}" —É–¥–∞–ª—ë–Ω!`);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!');
    }
    delete state.subState;
    showEmployeesMenu(chatId, state);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–º–µ–Ω
function handleShiftsStates(chatId, text, state) {
  if (text === '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—ã') {
    const employees = parksData[state.park]?.employees || [];
    if (employees.length === 0) {
      bot.sendMessage(chatId, '–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω');
      return;
    }
    
    let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω:\n\n';
    employees.forEach((emp, index) => {
      message += `${index + 1}. ${emp}\n`;
    });
    
    state.subState = 'selecting_employee_for_shifts';
    bot.sendMessage(chatId, message);
  } else if (text === 'üí∞ –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã') {
    const park = state.park;
    const employees = parksData[park]?.employees || [];
    const shifts = parksData[park]?.shifts || {};
    
    let message = 'üí∞ <b>–†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã:</b>\n\n';
    let totalSalary = 0;
    
    employees.forEach(name => {
      const row = shifts[name] || Array(7).fill('');
      const salary = calculateSalary(name, row);
      totalSalary += salary;
      message += `${name}: ${formatCurrency(salary)}\n`;
    });
    
    message += `\nüíµ <b>–û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${formatCurrency(totalSalary)}</b>`;
    bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
  } else if (state.subState === 'selecting_employee_for_shifts') {
    const park = state.park;
    const employees = parksData[park]?.employees || [];
    const index = parseInt(text) - 1;
    
    if (index >= 0 && index < employees.length) {
      const employeeName = employees[index];
      state.selectedEmployee = employeeName;
      state.subState = 'editing_shifts';
      
      const shifts = parksData[park]?.shifts?.[employeeName] || Array(7).fill('');
      const days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
      
      let message = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω –¥–ª—è ${employeeName}:\n\n`;
      days.forEach((day, i) => {
        message += `${day}: ${shifts[i] || ''}\n`;
      });
      message += '\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (7 –∑–Ω–∞—á–µ–Ω–∏–π):';
      
      bot.sendMessage(chatId, message);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!');
      delete state.subState;
      showShiftsMenu(chatId, state);
    }
  } else if (state.subState === 'editing_shifts') {
    const park = state.park;
    const values = text.split(',').map(v => v.trim());
    
    if (values.length === 7) {
      const employeeName = state.selectedEmployee;
      parksData[park].shifts[employeeName] = values;
      saveData();
      
      bot.sendMessage(chatId, `‚úÖ –°–º–µ–Ω—ã –¥–ª—è ${employeeName} –æ–±–Ω–æ–≤–ª–µ–Ω—ã!`);
      delete state.subState;
      delete state.selectedEmployee;
      showShiftsMenu(chatId, state);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ 7 –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.');
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–æ–≤
function handleMachinesStates(chatId, text, state) {
  if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å') {
    state.subState = 'adding_machine_record';
    bot.sendMessage(chatId, 
      '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
      '—Ç–∏–ø,–¥–∞—Ç–∞_—Å,–¥–∞—Ç–∞_–ø–æ,—Å—É–º–º–∞\n\n' +
      '–ü—Ä–∏–º–µ—Ä: hockey,2024-01-01,2024-01-07,5000\n' +
      '–¢–∏–ø—ã: hockey, boxer'
    );
  } else if (text === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å') {
    const machines = parksData[state.park]?.machines || [];
    if (machines.length === 0) {
      bot.sendMessage(chatId, '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }
    
    let message = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n';
    machines.forEach((entry, index) => {
      const type = entry.type === 'hockey' ? 'üèí –•–æ–∫–∫–µ–π' : 'ü•ä –ë–æ–∫—Å—ë—Ä';
      message += `${index + 1}. ${type} | ${entry.from}-${entry.to} | ${formatCurrency(entry.amount)}\n`;
    });
    
    state.subState = 'deleting_machine_record';
    bot.sendMessage(chatId, message);
  } else if (state.subState === 'adding_machine_record') {
    const parts = text.split(',');
    if (parts.length === 4) {
      const [type, from, to, amount] = parts;
      
      if (type !== 'hockey' && type !== 'boxer') {
        bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ hockey –∏–ª–∏ boxer');
        return;
      }
      
      if (!validateDate(from) || !validateDate(to)) {
        bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD');
        return;
      }
      
      const amountNum = parseInt(amount);
      if (isNaN(amountNum) || amountNum < 0) {
        bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
        return;
      }
      
      const park = state.park;
      parksData[park].machines.push({
        type,
        from,
        to,
        amount: amountNum
      });
      saveData();
      
      const typeName = type === 'hockey' ? 'üèí –•–æ–∫–∫–µ–π' : 'ü•ä –ë–æ–∫—Å—ë—Ä';
      bot.sendMessage(chatId, `‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${typeName} | ${from}-${to} | ${formatCurrency(amountNum)}`);
      delete state.subState;
      showMachinesMenu(chatId, state);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ç–∏–ø,–¥–∞—Ç–∞_—Å,–¥–∞—Ç–∞_–ø–æ,—Å—É–º–º–∞');
    }
  } else if (state.subState === 'deleting_machine_record') {
    const park = state.park;
    const machines = parksData[park]?.machines || [];
    const index = parseInt(text) - 1;
    
    if (index >= 0 && index < machines.length) {
      const entry = machines[index];
      const typeName = entry.type === 'hockey' ? 'üèí –•–æ–∫–∫–µ–π' : 'ü•ä –ë–æ–∫—Å—ë—Ä';
      
      parksData[park].machines.splice(index, 1);
      saveData();
      
      bot.sendMessage(chatId, `‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: ${typeName} | ${entry.from}-${entry.to} | ${formatCurrency(entry.amount)}`);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏!');
    }
    delete state.subState;
    showMachinesMenu(chatId, state);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
function calculateSalary(name, row) {
  const total = row.reduce((sum, val) => {
    return sum + (config.SALARY_RATES[val] || 0);
  }, 0);
  return total;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.log('‚ùå Polling error:', error);
});

bot.on('error', (error) => {
  console.log('‚ùå Bot error:', error);
});

console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log('üè¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∫–∏:', Object.keys(config.PARKS).map(park => getParkName(park)).join(', '));
console.log('‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.js'); 