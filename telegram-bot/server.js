const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const PORT = process.env.PORT || 3001;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  BOT_TOKEN: process.env.BOT_TOKEN || '8403584306:AAH4Ur6s46KYaUrjGOk3DRjT4d6AjbqKzj8',
  USERS: {
    adminApet: { password: '1234', park: 'parkFrunze', role: 'admin' },
    adminNarek: { password: '4321', park: 'parkMorVokzal', role: 'admin' },
    adminXunk: { password: '9999', park: 'parkNeptun', role: 'admin' },
    manager1: { password: '5678', park: 'parkFrunze', role: 'manager' },
    manager2: { password: '8765', park: 'parkFrunze', role: 'manager' },
    supervisor1: { password: '1111', park: 'parkFrunze', role: 'supervisor' },
    supervisor2: { password: '2222', park: 'parkFrunze', role: 'supervisor' },
    managerMorVokzal: { password: '3333', park: 'parkMorVokzal', role: 'manager' },
    managerNeptun: { password: '4444', park: 'parkNeptun', role: 'manager' },
    testUser1: { password: 'test1', park: 'parkFrunze', role: 'viewer' },
    testUser2: { password: 'test2', park: 'parkFrunze', role: 'viewer' }
  },
  PARKS: {
    parkFrunze: { name: '–ü–∞—Ä–∫ –§—Ä—É–Ω–∑–µ', hockeyMachines: 5, boxerMachines: 1 },
    parkMorVokzal: { name: '–ü–∞—Ä–∫ –ú–æ—Ä—Å–∫–æ–π –í–æ–∫–∑–∞–ª', hockeyMachines: 1, boxerMachines: 1 },
    parkNeptun: { name: '–ü–∞—Ä–∫ –ù–µ–ø—Ç—É–Ω', hockeyMachines: 1, boxerMachines: 1 }
  },
  SECURITY: {
    maxLoginAttempts: parseInt(process.env.MAX_LOGIN_ATTEMPTS) || 3,
    sessionTimeout: parseInt(process.env.SESSION_TIMEOUT) || 30 * 60,
    allowedUsers: parseInt(process.env.ALLOWED_USERS) || 10
  },
  DATA_SETTINGS: {
    dataFile: process.env.DATA_FILE || './bot-data.json',
    backupInterval: parseInt(process.env.BACKUP_INTERVAL) || 24 * 60 * 60 * 1000
  },
  BOT_SETTINGS: {
    polling: true,
    parse_mode: 'HTML',
    disable_web_page_preview: true
  }
};

const bot = new TelegramBot(config.BOT_TOKEN, config.BOT_SETTINGS);

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
let parksData = {};
const userStates = {};
const loginAttempts = {};
const activeSessions = {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
  try {
    if (fs.existsSync(config.DATA_SETTINGS.dataFile)) {
      const raw = fs.readFileSync(config.DATA_SETTINGS.dataFile);
      parksData = JSON.parse(raw);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } else {
      parksData = {
        parkFrunze: { employees: [], shifts: {}, machines: [] },
        parkMorVokzal: { employees: [], shifts: {}, machines: [] },
        parkNeptun: { employees: [], shifts: {}, machines: [] }
      };
      saveData();
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    parksData = {
      parkFrunze: { employees: [], shifts: {}, machines: [] },
      parkMorVokzal: { employees: [], shifts: {}, machines: [] },
      parkNeptun: { employees: [], shifts: {}, machines: [] }
    };
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
  try {
    fs.writeFileSync(config.DATA_SETTINGS.dataFile, JSON.stringify(parksData, null, 2));
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
function createBackup() {
  try {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupFile = `backup-${timestamp}.json`;
    fs.writeFileSync(backupFile, JSON.stringify(parksData, null, 2));
    console.log(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupFile}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
  }
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
function logStatus() {
  const activeUsers = Object.keys(activeSessions).length;
  const totalParks = Object.keys(parksData).length;
  const totalEmployees = Object.values(parksData).reduce((sum, park) => sum + park.employees.length, 0);
  
  console.log(`üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:`);
  console.log(`   üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}`);
  console.log(`   üé¢ –ü–∞—Ä–∫–æ–≤: ${totalParks}`);
  console.log(`   üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${totalEmployees}`);
  console.log(`   üíæ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${JSON.stringify(parksData).length} –±–∞–π—Ç`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function checkSecurity(chatId) {
  const now = Date.now();
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
  Object.keys(activeSessions).forEach(sessionId => {
    if (now - activeSessions[sessionId].timestamp > config.SECURITY.sessionTimeout * 1000) {
      delete activeSessions[sessionId];
      delete userStates[sessionId];
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (Object.keys(activeSessions).length >= config.SECURITY.allowedUsers) {
    return false;
  }
  
  return true;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
function checkPermission(userRole, action) {
  const permissions = {
    admin: ['read', 'write', 'delete', 'manage_users', 'view_reports', 'manage_settings'],
    manager: ['read', 'write', 'view_reports'],
    supervisor: ['read', 'write'],
    viewer: ['read']
  };
  
  return permissions[userRole]?.includes(action) || false;
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainKeyboard = {
  reply_markup: {
    keyboard: [
      ['üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', 'üìÖ –°–º–µ–Ω—ã'],
      ['üéÆ –•–æ–∫–∫–µ–π/–ë–æ–∫—Å—ë—Ä', 'üìä –û—Ç—á—ë—Ç—ã'],
      ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ'],
      ['üö™ –í—ã–π—Ç–∏']
    ],
    resize_keyboard: true
  }
};

const backKeyboard = {
  reply_markup: {
    keyboard: [['üîô –ù–∞–∑–∞–¥']],
    resize_keyboard: true
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  if (!checkSecurity(chatId)) {
    bot.sendMessage(chatId, '‚ùå –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }
  
  userStates[chatId] = { state: 'login', step: 'username' };
  loginAttempts[chatId] = 0;
  
  bot.sendMessage(chatId, 
    'üé¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∫–æ–º –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤!\n\n' +
    '–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:',
    backKeyboard
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  if (!userStates[chatId]) {
    userStates[chatId] = { state: 'login', step: 'username' };
  }
  
  const state = userStates[chatId];
  
  if (state.state === 'login') {
    handleLogin(chatId, text, state);
  } else if (state.state === 'main') {
    handleMainMenu(chatId, text, state);
  } else if (state.state === 'employees') {
    handleEmployeesStates(chatId, text, state);
  } else if (state.state === 'shifts') {
    handleShiftsStates(chatId, text, state);
  } else if (state.state === 'machines') {
    handleMachinesStates(chatId, text, state);
  } else {
    handleStates(chatId, text, state);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
function handleLogin(chatId, text, state) {
  if (text === 'üîô –ù–∞–∑–∞–¥') {
    delete userStates[chatId];
    delete loginAttempts[chatId];
    bot.sendMessage(chatId, 'üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
    return;
  }
  
  if (state.step === 'username') {
    const user = config.USERS[text];
    if (user) {
      state.username = text;
      state.step = 'password';
      state.park = user.park;
      state.role = user.role;
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
    } else {
      loginAttempts[chatId]++;
      if (loginAttempts[chatId] >= config.SECURITY.maxLoginAttempts) {
        bot.sendMessage(chatId, '‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        delete userStates[chatId];
        delete loginAttempts[chatId];
      } else {
        bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
      }
    }
  } else if (state.step === 'password') {
    const user = config.USERS[state.username];
    if (text === user.password) {
      state.state = 'main';
      delete state.step;
      activeSessions[chatId] = {
        username: state.username,
        park: state.park,
        role: state.role,
        timestamp: Date.now()
      };
      showMainMenu(chatId);
    } else {
      loginAttempts[chatId]++;
      if (loginAttempts[chatId] >= config.SECURITY.maxLoginAttempts) {
        bot.sendMessage(chatId, '‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        delete userStates[chatId];
        delete loginAttempts[chatId];
      } else {
        bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
      }
    }
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId) {
  const session = activeSessions[chatId];
  const parkName = config.PARKS[session.park].name;
  
  bot.sendMessage(chatId, 
    `üé¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n` +
    `üè¢ –ü–∞—Ä–∫: ${parkName}\n` +
    `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.username}\n` +
    `üîê –†–æ–ª—å: ${session.role}\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    mainKeyboard
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function handleMainMenu(chatId, text, state) {
  const session = activeSessions[chatId];
  
  if (text === 'üö™ –í—ã–π—Ç–∏') {
    delete userStates[chatId];
    delete activeSessions[chatId];
    bot.sendMessage(chatId, 'üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
    return;
  }
  
  switch (text) {
    case 'üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏':
      if (checkPermission(session.role, 'read')) {
        state.state = 'employees';
        showEmployeesMenu(chatId, state);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
      }
      break;
    case 'üìÖ –°–º–µ–Ω—ã':
      if (checkPermission(session.role, 'read')) {
        state.state = 'shifts';
        showShiftsMenu(chatId, state);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω');
      }
      break;
    case 'üéÆ –•–æ–∫–∫–µ–π/–ë–æ–∫—Å—ë—Ä':
      if (checkPermission(session.role, 'read')) {
        state.state = 'machines';
        showMachinesMenu(chatId, state);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–æ–≤');
      }
      break;
    case 'üìä –û—Ç—á—ë—Ç—ã':
      if (checkPermission(session.role, 'view_reports')) {
        showReports(chatId, state);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤');
      }
      break;
    case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
      if (checkPermission(session.role, 'manage_settings')) {
        showSettings(chatId, state);
      } else {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }
      break;
    case '‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ':
      showAbout(chatId);
      break;
    default:
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function showEmployeesMenu(chatId, state) {
  const session = activeSessions[chatId];
  const park = session.park;
  const employees = parksData[park]?.employees || [];
  
  let message = 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏\n\n';
  if (employees.length === 0) {
    message += 'üìù –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç\n';
  } else {
    employees.forEach((emp, index) => {
      message += `${index + 1}. ${emp.name} - ${emp.position}\n`;
    });
  }
  
  message += '\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n';
  message += '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n';
  message += '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n';
  message += 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å\n';
  message += 'üîô –ù–∞–∑–∞–¥';
  
  state.subState = 'employees_menu';
  bot.sendMessage(chatId, message, backKeyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–º–µ–Ω
function showShiftsMenu(chatId, state) {
  const session = activeSessions[chatId];
  const park = session.park;
  const shifts = parksData[park]?.shifts || {};
  
  let message = 'üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏\n\n';
  if (Object.keys(shifts).length === 0) {
    message += 'üìù –°–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n';
  } else {
    Object.keys(shifts).forEach(date => {
      message += `üìÖ ${date}:\n`;
      shifts[date].forEach((shift, index) => {
        message += `  ${index + 1}. ${shift.name} - ${shift.type}\n`;
      });
    });
  }
  
  message += '\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n';
  message += '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É\n';
  message += 'üìä –û—Ç—á—ë—Ç –ø–æ —Å–º–µ–Ω–∞–º\n';
  message += 'üîô –ù–∞–∑–∞–¥';
  
  state.subState = 'shifts_menu';
  bot.sendMessage(chatId, message, backKeyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–æ–≤
function showMachinesMenu(chatId, state) {
  const session = activeSessions[chatId];
  const park = session.park;
  const machines = parksData[park]?.machines || [];
  
  let message = 'üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏\n\n';
  if (machines.length === 0) {
    message += 'üìù –ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç\n';
  } else {
    machines.forEach((machine, index) => {
      const type = machine.type === 'hockey' ? '–•–æ–∫–∫–µ–π' : '–ë–æ–∫—Å—ë—Ä';
      message += `${index + 1}. ${type} | ${machine.from}-${machine.to} | ${machine.amount}‚ÇΩ\n`;
    });
  }
  
  message += '\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n';
  message += '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å\n';
  message += 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n';
  message += 'üìä –û—Ç—á—ë—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º\n';
  message += 'üîô –ù–∞–∑–∞–¥';
  
  state.subState = 'machines_menu';
  bot.sendMessage(chatId, message, backKeyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç—ã
function showReports(chatId, state) {
  const session = activeSessions[chatId];
  const park = session.park;
  const employees = parksData[park]?.employees || [];
  const shifts = parksData[park]?.shifts || {};
  const machines = parksData[park]?.machines || [];
  
  let message = 'üìä –û—Ç—á—ë—Ç—ã\n\n';
  message += `üè¢ –ü–∞—Ä–∫: ${config.PARKS[park].name}\n`;
  message += `üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}\n`;
  message += `üìÖ –î–Ω–µ–π —Å–æ —Å–º–µ–Ω–∞–º–∏: ${Object.keys(shifts).length}\n`;
  message += `üéÆ –ó–∞–ø–∏—Å–µ–π –∞–≤—Ç–æ–º–∞—Ç–æ–≤: ${machines.length}\n\n`;
  
  // –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç
  let totalSalary = 0;
  Object.keys(shifts).forEach(date => {
    shifts[date].forEach(shift => {
      totalSalary += calculateSalary(shift.name, [shift.type]);
    });
  });
  
  message += `üí∞ –û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${totalSalary}‚ÇΩ\n`;
  message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${Object.keys(shifts).length} –¥–Ω–µ–π`;
  
  bot.sendMessage(chatId, message, backKeyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
function showSettings(chatId, state) {
  const session = activeSessions[chatId];
  
  let message = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n';
  message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.username}\n`;
  message += `üîê –†–æ–ª—å: ${session.role}\n`;
  message += `üè¢ –ü–∞—Ä–∫: ${config.PARKS[session.park].name}\n`;
  message += `‚è∞ –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏: ${config.SECURITY.sessionTimeout / 60} –º–∏–Ω\n`;
  message += `üë• –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${config.SECURITY.allowedUsers}\n`;
  message += `üíæ –ê–≤—Ç–æ—Ä–µ–∑–µ—Ä–≤: –∫–∞–∂–¥—ã–µ ${config.DATA_SETTINGS.backupInterval / (60 * 60 * 1000)} —á`;
  
  bot.sendMessage(chatId, message, backKeyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
function showAbout(chatId) {
  const message = 
    '‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ\n\n' +
    'üé¢ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∫–æ–º –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤\n' +
    'üì± Telegram –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —Å–º–µ–Ω\n' +
    'üéÆ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ö–æ–∫–∫–µ–π–Ω—ã—Ö –∏ –±–æ–∫—Å—ë—Ä—Å–∫–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤\n' +
    'üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã –∏ —Ä–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç\n\n' +
    'üîß –í–µ—Ä—Å–∏—è: 1.0.0\n' +
    'üìÖ –î–∞—Ç–∞: 2024\n' +
    'üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Apet Mkoyan';
  
  bot.sendMessage(chatId, message, backKeyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
function handleStates(chatId, text, state) {
  if (text === 'üîô –ù–∞–∑–∞–¥') {
    state.state = 'main';
    delete state.subState;
    showMainMenu(chatId);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function handleEmployeesStates(chatId, text, state) {
  const session = activeSessions[chatId];
  const park = session.park;
  
  if (text === 'üîô –ù–∞–∑–∞–¥') {
    state.state = 'main';
    delete state.subState;
    showMainMenu(chatId);
    return;
  }
  
  if (state.subState === 'employees_menu') {
    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞') {
      state.subState = 'adding_employee';
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∏–º—è,–¥–æ–ª–∂–Ω–æ—Å—Ç—å');
    } else if (text === '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å') {
      state.subState = 'editing_employee';
      const employees = parksData[park]?.employees || [];
      if (employees.length === 0) {
        bot.sendMessage(chatId, '‚ùå –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        delete state.subState;
        showEmployeesMenu(chatId, state);
      } else {
        let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n';
        employees.forEach((emp, index) => {
          message += `${index + 1}. ${emp.name} - ${emp.position}\n`;
        });
        bot.sendMessage(chatId, message);
      }
    } else if (text === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å') {
      state.subState = 'deleting_employee';
      const employees = parksData[park]?.employees || [];
      if (employees.length === 0) {
        bot.sendMessage(chatId, '‚ùå –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        delete state.subState;
        showEmployeesMenu(chatId, state);
      } else {
        let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n';
        employees.forEach((emp, index) => {
          message += `${index + 1}. ${emp.name} - ${emp.position}\n`;
        });
        bot.sendMessage(chatId, message);
      }
    }
  } else if (state.subState === 'adding_employee') {
    const parts = text.split(',');
    if (parts.length === 2) {
      const [name, position] = parts;
      if (!parksData[park].employees) {
        parksData[park].employees = [];
      }
      parksData[park].employees.push({ name, position });
      saveData();
      bot.sendMessage(chatId, `‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ${name} - ${position}`);
      delete state.subState;
      showEmployeesMenu(chatId, state);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∏–º—è,–¥–æ–ª–∂–Ω–æ—Å—Ç—å');
    }
  } else if (state.subState === 'editing_employee') {
    const employees = parksData[park]?.employees || [];
    const index = parseInt(text) - 1;
    
    if (index >= 0 && index < employees.length) {
      state.editingIndex = index;
      state.subState = 'editing_employee_data';
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∏–º—è,–¥–æ–ª–∂–Ω–æ—Å—Ç—å');
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!');
      delete state.subState;
      showEmployeesMenu(chatId, state);
    }
  } else if (state.subState === 'editing_employee_data') {
    const parts = text.split(',');
    if (parts.length === 2) {
      const [name, position] = parts;
      const index = state.editingIndex;
      parksData[park].employees[index] = { name, position };
      saveData();
      bot.sendMessage(chatId, `‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω: ${name} - ${position}`);
      delete state.subState;
      delete state.editingIndex;
      showEmployeesMenu(chatId, state);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∏–º—è,–¥–æ–ª–∂–Ω–æ—Å—Ç—å');
    }
  } else if (state.subState === 'deleting_employee') {
    const employees = parksData[park]?.employees || [];
    const index = parseInt(text) - 1;
    
    if (index >= 0 && index < employees.length) {
      const employee = employees[index];
      parksData[park].employees.splice(index, 1);
      saveData();
      bot.sendMessage(chatId, `‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω: ${employee.name} - ${employee.position}`);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!');
    }
    delete state.subState;
    showEmployeesMenu(chatId, state);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–º–µ–Ω
function handleShiftsStates(chatId, text, state) {
  const session = activeSessions[chatId];
  const park = session.park;
  
  if (text === 'üîô –ù–∞–∑–∞–¥') {
    state.state = 'main';
    delete state.subState;
    showMainMenu(chatId);
    return;
  }
  
  if (state.subState === 'shifts_menu') {
    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É') {
      state.subState = 'adding_shift';
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞,–∏–º—è,—Ç–∏–ø_—Å–º–µ–Ω—ã');
    } else if (text === 'üìä –û—Ç—á—ë—Ç –ø–æ —Å–º–µ–Ω–∞–º') {
      const shifts = parksData[park]?.shifts || {};
      let message = 'üìä –û—Ç—á—ë—Ç –ø–æ —Å–º–µ–Ω–∞–º\n\n';
      
      if (Object.keys(shifts).length === 0) {
        message += 'üìù –°–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
      } else {
        Object.keys(shifts).forEach(date => {
          message += `üìÖ ${date}:\n`;
          shifts[date].forEach((shift, index) => {
            const salary = calculateSalary(shift.name, [shift.type]);
            message += `  ${index + 1}. ${shift.name} - ${shift.type} (${salary}‚ÇΩ)\n`;
          });
          message += '\n';
        });
      }
      bot.sendMessage(chatId, message, backKeyboard);
    }
  } else if (state.subState === 'adding_shift') {
    const parts = text.split(',');
    if (parts.length === 3) {
      const [date, name, type] = parts;
      
      if (!parksData[park].shifts) {
        parksData[park].shifts = {};
      }
      if (!parksData[park].shifts[date]) {
        parksData[park].shifts[date] = [];
      }
      
      parksData[park].shifts[date].push({ name, type });
      saveData();
      
      const salary = calculateSalary(name, [type]);
      bot.sendMessage(chatId, `‚úÖ –°–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${date} | ${name} | ${type} (${salary}‚ÇΩ)`);
      delete state.subState;
      showShiftsMenu(chatId, state);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¥–∞—Ç–∞,–∏–º—è,—Ç–∏–ø_—Å–º–µ–Ω—ã');
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–æ–≤
function handleMachinesStates(chatId, text, state) {
  const session = activeSessions[chatId];
  const park = session.park;
  
  if (text === 'üîô –ù–∞–∑–∞–¥') {
    state.state = 'main';
    delete state.subState;
    showMainMenu(chatId);
    return;
  }
  
  if (state.subState === 'machines_menu') {
    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å') {
      state.subState = 'adding_machine_record';
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Ç–∏–ø,–¥–∞—Ç–∞_—Å,–¥–∞—Ç–∞_–ø–æ,—Å—É–º–º–∞\n(—Ç–∏–ø: hockey –∏–ª–∏ boxer)');
    } else if (text === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å') {
      const machines = parksData[park]?.machines || [];
      if (machines.length === 0) {
        bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        delete state.subState;
        showMachinesMenu(chatId, state);
      } else {
        let message = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n';
        machines.forEach((machine, index) => {
          const type = machine.type === 'hockey' ? '–•–æ–∫–∫–µ–π' : '–ë–æ–∫—Å—ë—Ä';
          message += `${index + 1}. ${type} | ${machine.from}-${machine.to} | ${machine.amount}‚ÇΩ\n`;
        });
        bot.sendMessage(chatId, message);
      }
      state.subState = 'deleting_machine_record';
    } else if (text === 'üìä –û—Ç—á—ë—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º') {
      const machines = parksData[park]?.machines || [];
      let message = 'üìä –û—Ç—á—ë—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º\n\n';
      
      if (machines.length === 0) {
        message += 'üìù –ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç';
      } else {
        let totalAmount = 0;
        machines.forEach((machine, index) => {
          const type = machine.type === 'hockey' ? '–•–æ–∫–∫–µ–π' : '–ë–æ–∫—Å—ë—Ä';
          message += `${index + 1}. ${type} | ${machine.from}-${machine.to} | ${machine.amount}‚ÇΩ\n`;
          totalAmount += machine.amount;
        });
        message += `\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount}‚ÇΩ`;
      }
      bot.sendMessage(chatId, message, backKeyboard);
    }
  } else if (state.subState === 'adding_machine_record') {
    const parts = text.split(',');
    if (parts.length === 4) {
      const [type, from, to, amount] = parts;
      
      if (type !== 'hockey' && type !== 'boxer') {
        bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ hockey –∏–ª–∏ boxer');
        return;
      }
      
      if (!parksData[park].machines) {
        parksData[park].machines = [];
      }
      
      parksData[park].machines.push({
        type,
        from,
        to,
        amount: parseInt(amount)
      });
      saveData();
      
      const typeName = type === 'hockey' ? '–•–æ–∫–∫–µ–π' : '–ë–æ–∫—Å—ë—Ä';
      bot.sendMessage(chatId, `‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${typeName} | ${from}-${to} | ${amount}‚ÇΩ`);
      delete state.subState;
      showMachinesMenu(chatId, state);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ç–∏–ø,–¥–∞—Ç–∞_—Å,–¥–∞—Ç–∞_–ø–æ,—Å—É–º–º–∞');
    }
  } else if (state.subState === 'deleting_machine_record') {
    const park = state.park;
    const machines = parksData[park]?.machines || [];
    const index = parseInt(text) - 1;
    
    if (index >= 0 && index < machines.length) {
      const entry = machines[index];
      const typeName = entry.type === 'hockey' ? '–•–æ–∫–∫–µ–π' : '–ë–æ–∫—Å—ë—Ä';
      
      parksData[park].machines.splice(index, 1);
      saveData();
      
      bot.sendMessage(chatId, `‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: ${typeName} | ${entry.from}-${entry.to} | ${entry.amount}‚ÇΩ`);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏!');
    }
    delete state.subState;
    showMachinesMenu(chatId, state);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
function calculateSalary(name, row) {
  const total = row.reduce((sum, val) => {
    if (val === '++') return sum + 2000;
    if (val === '—Å—Ç') return sum + 1000;
    if (val === '–∫–∞—Å—Å–∞1') return sum + 2500;
    if (val === '–∫–∞—Å—Å–∞2') return sum + 3000;
    if (val === '+') return sum + 1500;
    if (val === '1200') return sum + 1200;
    if (val === '1000') return sum + 1000;
    return sum;
  }, 0);
  return total;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.log('‚ùå Polling error:', error);
});

bot.on('error', (error) => {
  console.log('‚ùå Bot error:', error);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  saveData();
  createBackup();
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  saveData();
  createBackup();
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É');
  process.exit(0);
});

// HTTP –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
  res.json({
    status: 'online',
    service: 'Telegram Bot for Park Management',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    activeUsers: Object.keys(activeSessions).length,
    totalParks: Object.keys(parksData).length
  });
});

app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    activeUsers: Object.keys(activeSessions).length
  });
});

app.get('/status', (req, res) => {
  res.json({
    botStatus: 'running',
    activeUsers: Object.keys(activeSessions).length,
    totalParks: Object.keys(parksData).length,
    totalEmployees: Object.values(parksData).reduce((sum, park) => sum + (park.employees?.length || 0), 0),
    dataSize: JSON.stringify(parksData).length
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  loadData();
  
  // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  setInterval(logStatus, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  setInterval(createBackup, config.DATA_SETTINGS.backupInterval);
  
  console.log('üöÄ –ü—Ä–æ–¥–∞–∫—à–Ω Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  console.log('üîê –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∞');
  console.log('üë• –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', config.SECURITY.allowedUsers);
  console.log('‚è∞ –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏:', config.SECURITY.sessionTimeout / 60, '–º–∏–Ω—É—Ç');
  console.log('üíæ –ê–≤—Ç–æ—Ä–µ–∑–µ—Ä–≤ –∫–∞–∂–¥—ã–µ:', config.DATA_SETTINGS.backupInterval / (60 * 60 * 1000), '—á–∞—Å–æ–≤');
  console.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
}); 