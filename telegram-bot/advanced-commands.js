const axios = require('axios');

class AdvancedCommands {
  constructor(bot, userSessions, API_BASE_URL) {
    this.bot = bot;
    this.userSessions = userSessions;
    this.API_BASE_URL = API_BASE_URL;
    this.daysOfWeek = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
    
    this.setupCommands();
  }

  setupCommands() {
    // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    this.bot.onText(/\/employee_schedule/, async (msg) => {
      const chatId = msg.chat.id;
      
      if (!this.checkAuth(chatId)) return;
      
      try {
        const session = this.userSessions[chatId];
        const response = await axios.get(`${this.API_BASE_URL}/employees/${session.park}`);
        const employees = response.data;
        
        if (employees.length === 0) {
          this.bot.sendMessage(chatId, '–í –ø–∞—Ä–∫–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.');
          return;
        }
        
        let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n';
        employees.forEach((employee, index) => {
          message += `${index + 1}. ${employee}\n`;
        });
        message += '\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:';
        
        this.bot.sendMessage(chatId, message);
        this.userSessions[chatId].step = 'waiting_employee_number';
        this.userSessions[chatId].employees = employees;
      } catch (error) {
        this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.');
      }
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    this.bot.onText(/\/add_employee/, (msg) => {
      const chatId = msg.chat.id;
      
      if (!this.checkAuth(chatId)) return;
      
      this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:');
      this.userSessions[chatId].step = 'waiting_new_employee_name';
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    this.bot.onText(/\/remove_employee/, async (msg) => {
      const chatId = msg.chat.id;
      
      if (!this.checkAuth(chatId)) return;
      
      try {
        const session = this.userSessions[chatId];
        const response = await axios.get(`${this.API_BASE_URL}/employees/${session.park}`);
        const employees = response.data;
        
        if (employees.length === 0) {
          this.bot.sendMessage(chatId, '–í –ø–∞—Ä–∫–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
          return;
        }
        
        let message = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n';
        employees.forEach((employee, index) => {
          message += `${index + 1}. ${employee}\n`;
        });
        message += '\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:';
        
        this.bot.sendMessage(chatId, message);
        this.userSessions[chatId].step = 'waiting_remove_employee_number';
        this.userSessions[chatId].employees = employees;
      } catch (error) {
        this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.');
      }
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä–∫–∞
    this.bot.onText(/\/stats/, async (msg) => {
      const chatId = msg.chat.id;
      
      if (!this.checkAuth(chatId)) return;
      
      try {
        const session = this.userSessions[chatId];
        const [employeesResponse, shiftsResponse] = await Promise.all([
          axios.get(`${this.API_BASE_URL}/employees/${session.park}`),
          axios.get(`${this.API_BASE_URL}/shifts/${session.park}`)
        ]);
        
        const employees = employeesResponse.data;
        const shifts = shiftsResponse.data;
        
        // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const totalEmployees = employees.length;
        let totalShifts = 0;
        let doubleShifts = 0;
        let cashierShifts = 0;
        let supervisorShifts = 0;
        
        Object.values(shifts).forEach(schedule => {
          schedule.forEach(shift => {
            if (shift) {
              totalShifts++;
              if (shift === '++') doubleShifts++;
              if (shift.includes('–∫–∞—Å—Å–∞')) cashierShifts++;
              if (shift === '—Å—Ç') supervisorShifts++;
            }
          });
        });
        
        const workingThisWeek = Object.values(shifts).filter(schedule => 
          schedule.some(shift => shift)
        ).length;
        
        let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä–∫–∞ ${session.parkName}\n\n`;
        message += `üë• –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${totalEmployees}\n`;
        message += `‚úÖ –†–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: ${workingThisWeek}\n`;
        message += `üìÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω: ${totalShifts}\n`;
        message += `üî• –î–≤–æ–π–Ω—ã–µ —Å–º–µ–Ω—ã: ${doubleShifts}\n`;
        message += `üí∞ –°–º–µ–Ω—ã –Ω–∞ –∫–∞—Å—Å–µ: ${cashierShifts}\n`;
        message += `üëë –°–º–µ–Ω—ã —Å—Ç–∞—Ä—à–µ–≥–æ: ${supervisorShifts}\n`;
        
        if (totalEmployees > 0) {
          const avgShiftsPerEmployee = (totalShifts / totalEmployees).toFixed(1);
          message += `üìà –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${avgShiftsPerEmployee}`;
        }
        
        this.bot.sendMessage(chatId, message);
      } catch (error) {
        this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
      }
    });

    // –û—Ç—á–µ—Ç –ø–æ –Ω–µ–¥–µ–ª–µ
    this.bot.onText(/\/report_week/, async (msg) => {
      const chatId = msg.chat.id;
      
      if (!this.checkAuth(chatId)) return;
      
      try {
        const session = this.userSessions[chatId];
        const response = await axios.get(`${this.API_BASE_URL}/shifts/${session.park}`);
        const shifts = response.data;
        
        let message = `üìã –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç - ${session.parkName}\n\n`;
        
        this.daysOfWeek.forEach((day, dayIndex) => {
          const workingToday = [];
          Object.entries(shifts).forEach(([employee, schedule]) => {
            const shift = schedule[dayIndex];
            if (shift) {
              workingToday.push(`${employee} (${this.formatShiftShort(shift)})`);
            }
          });
          
          message += `üìÖ ${day}:\n`;
          if (workingToday.length === 0) {
            message += '  –ù–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n';
          } else {
            message += `  ${workingToday.join(', ')}\n`;
          }
          message += '\n';
        });
        
        if (message.length > 4000) {
          const messages = this.splitMessage(message, 4000);
          for (const msg of messages) {
            await this.bot.sendMessage(chatId, msg);
          }
        } else {
          this.bot.sendMessage(chatId, message);
        }
      } catch (error) {
        this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.');
      }
    });

    // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
    this.bot.onText(/\/schedule_day/, (msg) => {
      const chatId = msg.chat.id;
      
      if (!this.checkAuth(chatId)) return;
      
      let message = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:\n\n';
      this.daysOfWeek.forEach((day, index) => {
        message += `${index + 1}. ${day}\n`;
      });
      message += '\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–Ω—è:';
      
      this.bot.sendMessage(chatId, message);
      this.userSessions[chatId].step = 'waiting_day_number';
    });

    // –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö
    this.bot.onText(/\/backup_data/, async (msg) => {
      const chatId = msg.chat.id;
      
      if (!this.checkAuth(chatId)) return;
      
      try {
        const session = this.userSessions[chatId];
        const [employeesResponse, shiftsResponse] = await Promise.all([
          axios.get(`${this.API_BASE_URL}/employees/${session.park}`),
          axios.get(`${this.API_BASE_URL}/shifts/${session.park}`)
        ]);
        
        const backupData = {
          park: session.park,
          parkName: session.parkName,
          timestamp: new Date().toISOString(),
          employees: employeesResponse.data,
          shifts: shiftsResponse.data
        };
        
        const backupJson = JSON.stringify(backupData, null, 2);
        const date = new Date().toLocaleDateString('ru-RU');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        this.bot.sendDocument(chatId, Buffer.from(backupJson), {
          filename: `backup_${session.park}_${date}.json`
        }, {
          caption: `üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∫–∞ ${session.parkName} –æ—Ç ${date}`
        });
        
      } catch (error) {
        this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.');
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  async handleTextMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const session = this.userSessions[chatId];
    
    if (!session || !session.step) return false;

    try {
      switch (session.step) {
        case 'waiting_employee_number':
          await this.handleEmployeeScheduleRequest(chatId, text);
          break;
          
        case 'waiting_new_employee_name':
          await this.handleAddEmployee(chatId, text);
          break;
          
        case 'waiting_remove_employee_number':
          await this.handleRemoveEmployee(chatId, text);
          break;
          
        case 'waiting_day_number':
          await this.handleDayScheduleRequest(chatId, text);
          break;
          
        default:
          return false;
      }
      return true;
    } catch (error) {
      this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
      session.step = null;
      return true;
    }
  }

  async handleEmployeeScheduleRequest(chatId, text) {
    const session = this.userSessions[chatId];
    const employeeIndex = parseInt(text) - 1;
    
    if (isNaN(employeeIndex) || employeeIndex < 0 || employeeIndex >= session.employees.length) {
      this.bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.');
      session.step = null;
      return;
    }
    
    const employeeName = session.employees[employeeIndex];
    const response = await axios.get(`${this.API_BASE_URL}/shifts/${session.park}`);
    const shifts = response.data;
    const employeeSchedule = shifts[employeeName];
    
    if (!employeeSchedule) {
      this.bot.sendMessage(chatId, '–£ —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
      session.step = null;
      return;
    }
    
    let message = `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${employeeName}\n\n`;
    employeeSchedule.forEach((shift, dayIndex) => {
      message += `${this.daysOfWeek[dayIndex]}: ${this.formatShift(shift)}\n`;
    });
    
    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const workDays = employeeSchedule.filter(shift => shift).length;
    const doubleDays = employeeSchedule.filter(shift => shift === '++').length;
    
    message += `\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    message += `–†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: ${workDays}\n`;
    if (doubleDays > 0) message += `–î–≤–æ–π–Ω—ã—Ö —Å–º–µ–Ω: ${doubleDays}\n`;
    
    this.bot.sendMessage(chatId, message);
    session.step = null;
  }

  async handleAddEmployee(chatId, text) {
    const session = this.userSessions[chatId];
    const employeeName = text.trim();
    
    if (!employeeName) {
      this.bot.sendMessage(chatId, '–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
      session.step = null;
      return;
    }
    
    try {
      await axios.post(`${this.API_BASE_URL}/employees/${session.park}`, {
        name: employeeName
      });
      
      this.bot.sendMessage(chatId, `‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${employeeName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
    } catch (error) {
      if (error.response && error.response.status === 400) {
        this.bot.sendMessage(chatId, '–¢–∞–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
      } else {
        this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.');
      }
    }
    
    session.step = null;
  }

  async handleRemoveEmployee(chatId, text) {
    const session = this.userSessions[chatId];
    const employeeIndex = parseInt(text) - 1;
    
    if (isNaN(employeeIndex) || employeeIndex < 0 || employeeIndex >= session.employees.length) {
      this.bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.');
      session.step = null;
      return;
    }
    
    const employeeName = session.employees[employeeIndex];
    
    try {
      await axios.delete(`${this.API_BASE_URL}/employees/${session.park}/${encodeURIComponent(employeeName)}`);
      this.bot.sendMessage(chatId, `‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${employeeName}" —É–¥–∞–ª–µ–Ω.`);
    } catch (error) {
      this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.');
    }
    
    session.step = null;
  }

  async handleDayScheduleRequest(chatId, text) {
    const session = this.userSessions[chatId];
    const dayIndex = parseInt(text) - 1;
    
    if (isNaN(dayIndex) || dayIndex < 0 || dayIndex >= 7) {
      this.bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è.');
      session.step = null;
      return;
    }
    
    await this.sendDaySchedule(chatId, dayIndex, this.daysOfWeek[dayIndex]);
    session.step = null;
  }

  async sendDaySchedule(chatId, dayIndex, dayName) {
    try {
      const session = this.userSessions[chatId];
      const response = await axios.get(`${this.API_BASE_URL}/shifts/${session.park}`);
      const shifts = response.data;
      
      let message = `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${dayName} - ${session.parkName}\n\n`;
      
      const workingEmployees = [];
      Object.entries(shifts).forEach(([employee, schedule]) => {
        const shift = schedule[dayIndex];
        if (shift) {
          workingEmployees.push(`üë§ ${employee}: ${this.formatShift(shift)}`);
        }
      });
      
      if (workingEmployees.length === 0) {
        message += '–ù–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç üò¥';
      } else {
        message += workingEmployees.join('\n');
      }
      
      this.bot.sendMessage(chatId, message);
    } catch (error) {
      this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å.');
    }
  }

  checkAuth(chatId) {
    if (!this.userSessions[chatId] || !this.userSessions[chatId].isAuthenticated) {
      this.bot.sendMessage(chatId, '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login');
      return false;
    }
    return true;
  }

  formatShift(shift) {
    if (!shift) return 'üö´ –í—ã—Ö–æ–¥–Ω–æ–π';
    if (shift === '+') return '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç';
    if (shift === '++') return 'üî• –î–≤–æ–π–Ω–∞—è —Å–º–µ–Ω–∞';
    if (shift.includes('–∫–∞—Å—Å–∞')) return 'üí∞ ' + shift;
    if (shift === '—Å—Ç') return 'üëë –°—Ç–∞—Ä—à–∏–π —Å–º–µ–Ω—ã';
    return shift;
  }

  formatShiftShort(shift) {
    if (!shift) return '–í—ã—Ö–æ–¥–Ω–æ–π';
    if (shift === '+') return '–†–∞–±–æ—Ç–∞–µ—Ç';
    if (shift === '++') return '–î–≤–æ–π–Ω–∞—è';
    if (shift.includes('–∫–∞—Å—Å–∞')) return shift;
    if (shift === '—Å—Ç') return '–°—Ç–∞—Ä—à–∏–π';
    return shift;
  }

  splitMessage(message, maxLength) {
    const messages = [];
    let current = '';
    
    const lines = message.split('\n');
    for (const line of lines) {
      if ((current + line + '\n').length > maxLength) {
        if (current) {
          messages.push(current);
          current = '';
        }
      }
      current += line + '\n';
    }
    
    if (current) {
      messages.push(current);
    }
    
    return messages;
  }
}

module.exports = AdvancedCommands;