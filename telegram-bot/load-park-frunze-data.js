const fs = require('fs');

// –î–∞–Ω–Ω—ã–µ –ø–∞—Ä–∫–∞ –§—Ä—É–Ω–∑–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
const parkFrunzeData = {
  employees: [
    '–î–∞—à–∞ –∫–∞—Å—Å–∞',
    '–°–æ—Ñ–∏—è –∫–∞—Å—Å–∞',
    '–°–≤–µ—Ç–ª–∞–Ω–∞', 
    '–ú–∏–ª–µ–Ω–∞',
    '–î–∂–∞—Ñ–∞—Ä',
    '–í–∏–∫–∞',
    '–í–∏–∫–∞ –î.',
    '–ê–ª–∏–Ω–∞',
    '–°–∞—à–∞ —Å—Ç ',
    '–î–º–∏—Ç—Ä–∏–π —Å—Ç',
    '–ê–Ω–¥—Ä–µ–π',
    '–ê–ª—ë–Ω–∞',
    '–ö–∏—Ä–∏–ª–ª –º–µ–¥–≤–µ–¥',
    '–†–æ–±–µ—Ä—Ç',
    '–ö—Å–µ–Ω–∏—è',
    '–ê–Ω–∞—Å—Ç–∞—Å–∏—è',
    '–ü–ª–∞—Ç–æ–Ω',
    '–°—Ç–∞—Å'
  ],
  shifts: {
    '–î–∞—Ä—ã—è': ['', '', '', '', '', '', ''],
    '–°–≤–µ—Ç–∞': ['–ú', '', '', '', '', '', ''],
    '–ú–∏–ª–µ–Ω–∞': ['', '', '', '', '', '', ''],
    '–î–∂–∞—Ñ–∞—Ä': ['', '', '–ú', '', '', '', ''],
    '–í–∏–∫–∞': ['', '', '', '', '', '', ''],
    '–í–∏–∫–∞ –î.': ['', '', '', '', '', '', ''],
    '–ê–ª–∏–Ω–∞': ['', '', '', '', '', '', ''],
    '–°–∞—à–∞ —Å—Ç': ['', '', '', '', '', '', ''],
    '–î–º–∏—Ç—Ä–∏–π —Å—Ç': ['', '', '', '', '', '', ''],
    '–ê–Ω–¥—Ä–µ–π': ['', '', '', '', '', '', ''],
    '–ê–ª—ë–Ω–∞': ['', '', '', '', '', '', ''],
    '–ö–∏—Ä–∏–ª–ª –º–µ–¥–≤–µ–¥': ['', '', '', '', '', '', ''],
    '–†–æ–±–µ—Ä—Ç': ['', '–ù', '', '', '', '', ''],
    '–ö—Å–µ–Ω–∏—è': ['', '', '', '', '–ù', '', ''],
    '–ê–Ω–∞—Å—Ç–∞—Å–∏—è': ['', '', '', '', '–ù', '', ''],
    '–ü–ª–∞—Ç–æ–Ω': ['', '', '', '', '', '', ''],
    '–°—Ç–∞—Å': ['', '', '', '', '', '', '']
  },
  machines: []
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function loadData() {
  const DATA_FILE = './bot-data.json';
  let parksData = {};
  
  try {
    if (fs.existsSync(DATA_FILE)) {
      const raw = fs.readFileSync(DATA_FILE);
      parksData = JSON.parse(raw);
    } else {
      parksData = {
        parkFrunze: { employees: [], shifts: {}, machines: [] },
        parkMorVokzal: { employees: [], shifts: {}, machines: [] },
        parkNeptun: { employees: [], shifts: {}, machines: [] }
      };
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    parksData = {
      parkFrunze: { employees: [], shifts: {}, machines: [] },
      parkMorVokzal: { employees: [], shifts: {}, machines: [] },
      parkNeptun: { employees: [], shifts: {}, machines: [] }
    };
  }
  
  return parksData;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData(parksData) {
  const DATA_FILE = './bot-data.json';
  try {
    fs.writeFileSync(DATA_FILE, JSON.stringify(parksData, null, 2));
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–∞—Ä–∫–∞ –§—Ä—É–Ω–∑–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∫–∞ –§—Ä—É–Ω–∑–µ
function updateParkFrunze() {
  const parksData = loadData();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∫–∞ –§—Ä—É–Ω–∑–µ
  parksData.parkFrunze = parkFrunzeData;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  saveData(parksData);
  
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
  console.log(`üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${parkFrunzeData.employees.length}`);
  console.log(`üìÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: ${Object.keys(parkFrunzeData.shifts).filter(name => 
    parkFrunzeData.shifts[name].some(shift => shift !== '')
  ).length}`);
  
  console.log('\nüìã –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏:');
  Object.keys(parkFrunzeData.shifts).forEach(name => {
    const shifts = parkFrunzeData.shifts[name];
    const hasShifts = shifts.some(shift => shift !== '');
    if (hasShifts) {
      const days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
      const shiftInfo = days.map((day, i) => shifts[i] ? `${day}:${shifts[i]}` : '').filter(info => info).join(', ');
      console.log(`  ‚Ä¢ ${name}: ${shiftInfo}`);
    }
  });
}

// –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∫–∞ –§—Ä—É–Ω–∑–µ...');
updateParkFrunze();
console.log('\nüéØ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: npm start'); 