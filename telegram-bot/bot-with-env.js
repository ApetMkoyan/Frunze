require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const AdvancedCommands = require('./advanced-commands');

// –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ!)
const BOT_TOKEN = process.env.BOT_TOKEN;
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:4000';

if (!BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN!');
  console.log('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞:');
  console.log('BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å');
  process.exit(1);
}

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSessions = {};

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–µ—Ä–≤–µ—Ä—É)
const admins = {
  'adminApet': { password: '1234', park: 'parkFrunze', parkName: '–ü–∞—Ä–∫ –§—Ä—É–Ω–∑–µ' },
  'adminNarek': { password: '4321', park: 'parkMorVokzal', parkName: '–ü–∞—Ä–∫ –ú–æ—Ä–≤–æ–∫–∑–∞–ª' },
  'adminXunk': { password: '9999', park: 'parkNeptun', parkName: '–ü–∞—Ä–∫ –ù–µ–ø—Ç—É–Ω' }
};

// –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
const daysOfWeek = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const welcomeMessage = `
üè¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∫–∞–º–∏ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤ "–í–û–õ–ù–ê"!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login
  `;
  bot.sendMessage(chatId, welcomeMessage);
});

// –ü–æ–º–æ—â—å
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const helpMessage = `
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
/login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
/status - –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:
/employees - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
/add_employee - –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
/remove_employee - –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω:
/schedule - –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
/schedule_today - –ö—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è
/schedule_tomorrow - –ö—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞
/schedule_day - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
/employee_schedule - –ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

üìä –û—Ç—á–µ—Ç—ã:
/report_week - –û—Ç—á–µ—Ç –ø–æ –Ω–µ–¥–µ–ª–µ
/report_employee - –û—Ç—á–µ—Ç –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä–∫–∞

‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
/update_schedule - –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/backup_data - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é

‚ÑπÔ∏è –ü—Ä–æ—á–µ–µ:
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
  `;
  bot.sendMessage(chatId, helpMessage);
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
bot.onText(/\/login/, (msg) => {
  const chatId = msg.chat.id;
  
  if (userSessions[chatId] && userSessions[chatId].isAuthenticated) {
    bot.sendMessage(chatId, `–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ ${userSessions[chatId].login} (${userSessions[chatId].parkName})`);
    return;
  }
  
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:');
  userSessions[chatId] = { step: 'waiting_login' };
});

// –í—ã—Ö–æ–¥
bot.onText(/\/logout/, (msg) => {
  const chatId = msg.chat.id;
  delete userSessions[chatId];
  bot.sendMessage(chatId, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
});

// –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
bot.onText(/\/status/, (msg) => {
  const chatId = msg.chat.id;
  
  if (userSessions[chatId] && userSessions[chatId].isAuthenticated) {
    const session = userSessions[chatId];
    bot.sendMessage(chatId, `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: ${session.login}\nüè¢ –ü–∞—Ä–∫: ${session.parkName}`);
  } else {
    bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login');
  }
});

// –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
bot.onText(/\/employees/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!checkAuth(chatId)) return;
  
  try {
    const session = userSessions[chatId];
    const response = await axios.get(`${API_BASE_URL}/employees/${session.park}`);
    const employees = response.data;
    
    if (employees.length === 0) {
      bot.sendMessage(chatId, '–í –≤–∞—à–µ–º –ø–∞—Ä–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.');
      return;
    }
    
    let message = `üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–∞—Ä–∫–∞ ${session.parkName}:\n\n`;
    employees.forEach((employee, index) => {
      message += `${index + 1}. ${employee}\n`;
    });
    
    bot.sendMessage(chatId, message);
  } catch (error) {
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.');
  }
});

// –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
bot.onText(/\/schedule/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!checkAuth(chatId)) return;
  
  try {
    const session = userSessions[chatId];
    const response = await axios.get(`${API_BASE_URL}/shifts/${session.park}`);
    const shifts = response.data;
    
    if (Object.keys(shifts).length === 0) {
      bot.sendMessage(chatId, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ.');
      return;
    }
    
    let message = `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω - ${session.parkName}\n\n`;
    
    Object.entries(shifts).forEach(([employee, schedule]) => {
      message += `üë§ ${employee}:\n`;
      schedule.forEach((shift, dayIndex) => {
        const status = shift || 'üö´';
        message += `  ${daysOfWeek[dayIndex]}: ${formatShift(shift)}\n`;
      });
      message += '\n';
    });
    
    // –¢–µ–ª–µ–≥—Ä–∞–º –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.length > 4000) {
      const messages = splitMessage(message, 4000);
      for (const msg of messages) {
        await bot.sendMessage(chatId, msg);
      }
    } else {
      bot.sendMessage(chatId, message);
    }
  } catch (error) {
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
  }
});

// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
bot.onText(/\/schedule_today/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!checkAuth(chatId)) return;
  
  const today = new Date().getDay();
  const dayIndex = today === 0 ? 6 : today - 1; // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=0 -> 6
  
  await sendDaySchedule(chatId, dayIndex, '—Å–µ–≥–æ–¥–Ω—è');
});

// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
bot.onText(/\/schedule_tomorrow/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!checkAuth(chatId)) return;
  
  const tomorrow = (new Date().getDay() + 1) % 7;
  const dayIndex = tomorrow === 0 ? 6 : tomorrow - 1;
  
  await sendDaySchedule(chatId, dayIndex, '–∑–∞–≤—Ç—Ä–∞');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
const advancedCommands = new AdvancedCommands(bot, userSessions, API_BASE_URL);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text && text.startsWith('/')) return;
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  const handled = await advancedCommands.handleTextMessage(msg);
  if (handled) return;
  
  const session = userSessions[chatId];
  if (!session) return;
  
  if (session.step === 'waiting_login') {
    if (admins[text]) {
      session.login = text;
      session.step = 'waiting_password';
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
    } else {
      bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login');
      delete userSessions[chatId];
    }
  } else if (session.step === 'waiting_password') {
    const admin = admins[session.login];
    if (admin && admin.password === text) {
      session.isAuthenticated = true;
      session.park = admin.park;
      session.parkName = admin.parkName;
      session.step = null;
      bot.sendMessage(chatId, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: ${session.login}\n–ü–∞—Ä–∫: ${session.parkName}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.`);
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.');
      delete userSessions[chatId];
    }
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function checkAuth(chatId) {
  if (!userSessions[chatId] || !userSessions[chatId].isAuthenticated) {
    bot.sendMessage(chatId, '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login');
    return false;
  }
  return true;
}

function formatShift(shift) {
  if (!shift) return 'üö´ –í—ã—Ö–æ–¥–Ω–æ–π';
  if (shift === '+') return '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç';
  if (shift === '++') return 'üî• –î–≤–æ–π–Ω–∞—è —Å–º–µ–Ω–∞';
  if (shift.includes('–∫–∞—Å—Å–∞')) return 'üí∞ ' + shift;
  if (shift === '—Å—Ç') return 'üëë –°—Ç–∞—Ä—à–∏–π —Å–º–µ–Ω—ã';
  return shift;
}

async function sendDaySchedule(chatId, dayIndex, dayName) {
  try {
    const session = userSessions[chatId];
    const response = await axios.get(`${API_BASE_URL}/shifts/${session.park}`);
    const shifts = response.data;
    
    let message = `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${dayName} (${daysOfWeek[dayIndex]}) - ${session.parkName}\n\n`;
    
    const workingEmployees = [];
    Object.entries(shifts).forEach(([employee, schedule]) => {
      const shift = schedule[dayIndex];
      if (shift) {
        workingEmployees.push(`üë§ ${employee}: ${formatShift(shift)}`);
      }
    });
    
    if (workingEmployees.length === 0) {
      message += '–ù–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç üò¥';
    } else {
      message += workingEmployees.join('\n');
    }
    
    bot.sendMessage(chatId, message);
  } catch (error) {
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å.');
  }
}

function splitMessage(message, maxLength) {
  const messages = [];
  let current = '';
  
  const lines = message.split('\n');
  for (const line of lines) {
    if ((current + line + '\n').length > maxLength) {
      if (current) {
        messages.push(current);
        current = '';
      }
    }
    current += line + '\n';
  }
  
  if (current) {
    messages.push(current);
  }
  
  return messages;
}

console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: ${BOT_TOKEN.substring(0, 10)}...`);
console.log(`üåê API —Å–µ—Ä–≤–µ—Ä: ${API_BASE_URL}`);